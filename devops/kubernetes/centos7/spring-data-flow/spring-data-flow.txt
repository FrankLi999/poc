helm dependeny build/helm dependency update
helm install --name spring-df incubator/spring-cloud-data-flow --namespace spring-df

java -jar spring-cloud-dataflow-shell-1.6.2.RELEASE.jar --dataflow.mode=skipper

dataflow config server --username admin --password admin --uri http://10.233.2.26/

dataflow config server --username user --password password --uri http://10.233.2.26/
When using Kafka:

dataflow:>app register --type source --name time --uri docker://springcloudstream/time-source-kafka-10:1.3.1.RELEASE --metadata-uri maven://org.springframework.cloud.stream.app:time-source-kafka-10:jar:metadata:1.3.1.RELEASE
dataflow:>app register --type sink --name log --uri docker://springcloudstream/log-sink-kafka-10:1.3.1.RELEASE --metadata-uri maven://org.springframework.cloud.stream.app:log-sink-kafka-10:jar:metadata:1.3.1.RELEASE

Alternatively, if you would like to register all out-of-the-box stream applications for a particular binder in bulk, you can use one of the following commands. For more details, review how to register applications.

When using RabbitMQ:

dataflow:>app import --uri http://bit.ly/Celsius-SR3-stream-applications-rabbit-docker
When using Kafka:

dataflow:>app import --uri http://bit.ly/Celsius-SR3-stream-applications-kafka-10-docker

deploy a flow:
stream create --name ticktock --definition "time | log" --deploy

! kubectl get pods -l role=spring-app
! kubectl logs ticktock-log-0-qnk72
stream destroy --name ticktock
kubectl describe pods/ticktock-log-qnk72

==============================================================
NAME:   spring-data-flow
LAST DEPLOYED: Sun Sep 16 00:45:13 2018
NAMESPACE: spring-data-flow
STATUS: DEPLOYED

RESOURCES:
==> v1/ConfigMap
NAME                                DATA  AGE
spring-data-flow-data-flow-server   1     1s
spring-data-flow-data-flow-skipper  1     1s

==> v1/ServiceAccount
NAME                        SECRETS  AGE
spring-data-flow-data-flow  1        1s

==> v1beta1/Role
NAME                        AGE
spring-data-flow-data-flow  1s

==> v1/Service
NAME                                TYPE       CLUSTER-IP     EXTERNAL-IP  PORT(S)                                AGE
spring-data-flow-mysql              ClusterIP  10.233.59.225  <none>       3306/TCP                               1s
spring-data-flow-rabbitmq           ClusterIP  10.233.20.227  <none>       4369/TCP,5672/TCP,25672/TCP,15672/TCP  1s
spring-data-flow-redis              ClusterIP  10.233.51.137  <none>       6379/TCP                               1s
spring-data-flow-data-flow-metrics  ClusterIP  10.233.56.163  <none>       80/TCP                                 1s
spring-data-flow-data-flow-server   ClusterIP  10.233.51.222  <none>       80/TCP                                 1s
spring-data-flow-data-flow-skipper  ClusterIP  10.233.20.75   <none>       80/TCP                                 1s

==> v1beta1/Deployment
NAME                                DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
spring-data-flow-mysql              1        1        1           0          1s
spring-data-flow-rabbitmq           1        1        1           0          1s
spring-data-flow-redis              1        1        1           0          1s
spring-data-flow-data-flow-metrics  1        1        1           0          1s
spring-data-flow-data-flow-server   1        1        1           0          1s
spring-data-flow-data-flow-skipper  1        1        1           0          1s

==> v1/Pod(related)
NAME                                                 READY  STATUS             RESTARTS  AGE
spring-data-flow-mysql-d8565c6cb-6kljr               0/1    Init:0/1           0         1s
spring-data-flow-rabbitmq-5c6c76bb77-lq65z           0/1    ContainerCreating  0         1s
spring-data-flow-redis-7465d76dff-vqpjl              0/1    ContainerCreating  0         1s
spring-data-flow-data-flow-metrics-85bffd96bb-qm6bs  0/1    ContainerCreating  0         1s
spring-data-flow-data-flow-server-78896b7ffb-zqlft   0/1    ContainerCreating  0         1s
spring-data-flow-data-flow-skipper-86dd5b4794-m9c2t  0/1    Pending            0         1s

==> v1/Secret
NAME                        TYPE    DATA  AGE
spring-data-flow-mysql      Opaque  2     1s
spring-data-flow-rabbitmq   Opaque  2     1s
spring-data-flow-redis      Opaque  1     1s
spring-data-flow-data-flow  Opaque  2     1s

==> v1/PersistentVolumeClaim
NAME                       STATUS   VOLUME  CAPACITY  ACCESS MODES  STORAGECLASS  AGE
spring-data-flow-mysql     Pending  1s
spring-data-flow-rabbitmq  Pending  1s
spring-data-flow-redis     Pending  1s

==> v1beta1/RoleBinding
NAME                        AGE
spring-data-flow-data-flow  1s


NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace spring-data-flow -l "app=spring-data-flow-data-flow-server" -> -l "app=spring-cloud-data-flow,release=spring-data-flow,component=server"
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl port-forward $POD_NAME 8080:80

