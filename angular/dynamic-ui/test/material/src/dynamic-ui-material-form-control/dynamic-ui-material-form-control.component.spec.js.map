{"version":3,"sources":["material/src/dynamic-ui-material-form-control/dynamic-ui-material-form-control.component.spec.ts"],"names":[],"mappings":"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","file":"dynamic-ui-material-form-control.component.spec.js","sourcesContent":["import { TestBed, async, inject, ComponentFixture } from \"@angular/core/testing\";\r\nimport { DebugElement, SimpleChange, ChangeDetectorRef } from \"@angular/core\";\r\nimport { ReactiveFormsModule, FormGroup, FormControl } from \"@angular/forms\";\r\nimport { NoopAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { By } from \"@angular/platform-browser\";\r\nimport {\r\n  FormModel,\r\n  ComponentModel,\r\n  DynamicUIFormService,\r\n  DynamicUIBaseModule\r\n} from \"../../base\";\r\nimport {\r\n    MatAutocompleteModule,\r\n    MatCheckboxModule,\r\n    MatDatepickerModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule\r\n} from \"@angular/material\";\r\n\r\nimport { DynamicUIMaterialFormControlComponent } from \"./dynamic-ui-material-form-control.component\";\r\nimport { MatFormControlType } from \"./dynamic-ui-material-form.const\";\r\n\r\ndescribe(\"DynamicUIMaterialFormControlComponent test suite\", () => {\r\n\r\n    let formModel: FormModel = null,\r\n        testModel:ComponentModel = null,\r\n        formGroup: FormGroup,\r\n        fixture: ComponentFixture<DynamicUIMaterialFormControlComponent>,\r\n        component: DynamicUIMaterialFormControlComponent,\r\n        debugElement: DebugElement,\r\n        testElement: DebugElement;\r\n\r\n    beforeEach(async(() => {\r\n\r\n        TestBed.configureTestingModule({\r\n\r\n            imports: [\r\n                ReactiveFormsModule,\r\n                NoopAnimationsModule,\r\n                MatAutocompleteModule,\r\n                MatCheckboxModule,\r\n                MatDatepickerModule,\r\n                MatInputModule,\r\n                MatRadioModule,\r\n                MatSelectModule,\r\n                MatSliderModule,\r\n                MatSlideToggleModule,\r\n                DynamicUIBaseModule.forRoot()\r\n            ],\r\n            declarations: [DynamicUIMaterialFormControlComponent]\r\n\r\n        }).compileComponents().then(() => {\r\n\r\n            fixture = TestBed.createComponent(DynamicUIMaterialFormControlComponent);\r\n\r\n            component = fixture.componentInstance;\r\n            debugElement = fixture.debugElement;\r\n        });\r\n    }));\r\n\r\n    beforeEach(inject([ChangeDetectorRef, DynamicUIFormService], (changeRef: ChangeDetectorRef, service: DynamicUIFormService) => {\r\n\r\n        formGroup = service.createForm(formModel);\r\n\r\n        component.group = formGroup;\r\n        component.model = testModel;\r\n        component.showCharacterHint = false;\r\n\r\n        component.ngOnChanges({\r\n\r\n            group: new SimpleChange(null, component.group, true),\r\n            model: new SimpleChange(null, component.model, true),\r\n            showCharacterHint: new SimpleChange(null, component.showCharacterHint, true)\r\n        });\r\n\r\n        fixture.detectChanges();\r\n\r\n        testElement = debugElement.query(By.css(`input[id='${testModel.key}']`));\r\n    }));\r\n\r\n    it(\"should initialize correctly\", () => {\r\n\r\n        expect(component.context).toBeNull();\r\n        expect(component.control instanceof FormControl).toBe(true);\r\n        expect(component.group instanceof FormGroup).toBe(true);\r\n        // expect(component.model instanceof ComponentModel).toBe(true);\r\n        expect(component.hasErrorMessaging).toBe(false);\r\n        expect(component.showCharacterHint).toBe(false);\r\n\r\n        expect(component.characterCount).toBe(0);\r\n\r\n        // expect(component.onControlValueChanges).toBeDefined();\r\n        expect(component.onModelDisabledUpdates).toBeDefined();\r\n        // expect(component.onModelValueUpdates).toBeDefined();\r\n\r\n        expect(component.blur).toBeDefined();\r\n        expect(component.change).toBeDefined();\r\n        expect(component.focus).toBeDefined();\r\n\r\n        expect(component.onValueChange).toBeDefined();\r\n        expect(component.onFocusChange).toBeDefined();\r\n\r\n        expect(component.isValid).toBe(true);\r\n        expect(component.isInvalid).toBe(false);\r\n        expect(component.showErrorMessages).toBe(false);\r\n\r\n        expect(component.type).toEqual(MatFormControlType.Input);\r\n    });\r\n\r\n    it(\"should have an input element\", () => {\r\n\r\n        expect(testElement instanceof DebugElement).toBe(true);\r\n    });\r\n\r\n    it(\"should listen to native focus and blur events\", () => {\r\n\r\n        spyOn(component, \"onFocusChange\");\r\n\r\n        testElement.triggerEventHandler(\"focus\", null);\r\n        testElement.triggerEventHandler(\"blur\", null);\r\n\r\n        expect(component.onFocusChange).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it(\"should listen to native change event\", () => {\r\n\r\n        spyOn(component, \"onValueChange\");\r\n\r\n        testElement.triggerEventHandler(\"change\", null);\r\n\r\n        expect(component.onValueChange).toHaveBeenCalled();\r\n    });\r\n\r\n    it(\"should update model value when control value changes\", () => {\r\n\r\n        spyOn(component, \"onControlValueChanges\");\r\n\r\n        component.control.setValue(\"test\");\r\n\r\n        // expect(component.onControlValueChanges).toHaveBeenCalled();\r\n    });\r\n\r\n    it(\"should update control value when model value changes\", () => {\r\n\r\n        spyOn(component, \"onModelValueUpdates\");\r\n\r\n        //testModel.valueUpdates.next(\"test\");\r\n\r\n        expect(component.onModelValueUpdates).toHaveBeenCalled();\r\n    });\r\n\r\n    it(\"should update control activation when model disabled property changes\", () => {\r\n\r\n        spyOn(component, \"onModelDisabledUpdates\");\r\n\r\n        testModel.disabledUpdates.next(true);\r\n\r\n        expect(component.onModelDisabledUpdates).toHaveBeenCalled();\r\n    });\r\n\r\n    it(\"should determine correct form control type\", () => {\r\n\r\n        let testFn = DynamicUIMaterialFormControlComponent.getFormControlType;\r\n\r\n        expect(testFn(formModel[0])).toEqual(MatFormControlType.Checkbox);\r\n\r\n        expect(testFn(formModel[1])).toEqual(MatFormControlType.Group);\r\n\r\n        expect(testFn(formModel[2])).toEqual(MatFormControlType.DatePicker);\r\n\r\n        expect(testFn(formModel[3])).toBeNull();\r\n\r\n        expect(testFn(formModel[4])).toBeNull();\r\n\r\n        expect(testFn(formModel[5])).toEqual(MatFormControlType.Array);\r\n\r\n        expect(testFn(formModel[6])).toEqual(MatFormControlType.Group);\r\n\r\n        expect(testFn(formModel[7])).toEqual(MatFormControlType.Input);\r\n\r\n        expect(testFn(formModel[8])).toEqual(MatFormControlType.RadioGroup);\r\n\r\n        expect(testFn(formModel[9])).toEqual(MatFormControlType.Select);\r\n\r\n        expect(testFn(formModel[10])).toEqual(MatFormControlType.Slider);\r\n\r\n        expect(testFn(formModel[11])).toEqual(MatFormControlType.SlideToggle);\r\n\r\n        expect(testFn(formModel[12])).toEqual(MatFormControlType.TextArea);\r\n\r\n        expect(testFn(formModel[13])).toBeNull();\r\n    });\r\n});\r\n"]}