{"version":3,"sources":["basic/src/dynamic-ui-basic-form-control/dynamic-ui-basic-form-control..component.spec.ts"],"names":[],"mappings":"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","file":"dynamic-ui-basic-form-control..component.spec.js","sourcesContent":["import { TestBed, async, inject, ComponentFixture, fakeAsync, tick } from \"@angular/core/testing\";\r\nimport { DebugElement, SimpleChange, ChangeDetectorRef } from \"@angular/core\";\r\nimport { ReactiveFormsModule, FormGroup, FormControl } from \"@angular/forms\";\r\nimport { By } from \"@angular/platform-browser\";\r\nimport { TextMaskModule } from \"angular2-text-mask\";\r\nimport {\r\n    ComponentModel,\r\n    DynamicUIBaseModule,\r\n    DynamicUIFormValidationService\r\n} from \"../../base\";\r\nimport { DynamicUIBasicFormControlType, DynamicUIBasicFormControlComponent } from \"./dynamic-ui-basic-form-control.component\";\r\n\r\ndescribe(\"DynamicUIBasicFormControlComponent test suite\", () => {\r\n\r\n  let\r\n    formGroup: FormGroup,\r\n    fixture: ComponentFixture<DynamicUIBasicFormControlComponent>,\r\n    component: DynamicUIBasicFormControlComponent,\r\n    debugElement: DebugElement,\r\n    testElement: DebugElement,\r\n    testModel: ComponentModel = null;\r\n    beforeEach(async(() => {\r\n\r\n        TestBed.configureTestingModule({\r\n\r\n            imports: [ReactiveFormsModule, TextMaskModule, DynamicUIBaseModule.forRoot()],\r\n            declarations: [DynamicUIBasicFormControlComponent]\r\n\r\n        }).compileComponents().then(() => {\r\n\r\n            fixture = TestBed.createComponent(DynamicUIBasicFormControlComponent);\r\n\r\n            component = fixture.componentInstance;\r\n            debugElement = fixture.debugElement;\r\n        });\r\n    }));\r\n\r\n    beforeEach(inject([ChangeDetectorRef, DynamicUIFormValidationService], (changeDetectorRef: ChangeDetectorRef, service: DynamicUIFormValidationService) => {\r\n\r\n        formGroup = null;//service.createFormGroup(formModel);\r\n\r\n        component.group = formGroup;\r\n        component.model = testModel;\r\n\r\n        component.ngOnChanges({\r\n\r\n            group: new SimpleChange(null, component.group, true),\r\n            model: new SimpleChange(null, component.model, true)\r\n        });\r\n\r\n        fixture.detectChanges();\r\n\r\n        testElement = debugElement.query(By.css(`input[id='${testModel.key}']`));\r\n    }));\r\n\r\n    it(\"should initialize correctly\", () => {\r\n\r\n        expect(component.context).toBeNull();\r\n        expect(component.control instanceof FormControl).toBe(true);\r\n        expect(component.group instanceof FormGroup).toBe(true);\r\n        // expect(component.model instanceof ComponentModel).toBe(true);\r\n        expect(component.hasErrorMessaging).toBe(false);\r\n\r\n        // expect(component.onControlValueChanges).toBeDefined();\r\n        expect(component.onModelDisabledUpdates).toBeDefined();\r\n        // expect(component.onModelValueUpdates).toBeDefined();\r\n\r\n        expect(component.blur).toBeDefined();\r\n        expect(component.change).toBeDefined();\r\n        expect(component.focus).toBeDefined();\r\n\r\n        expect(component.onValueChange).toBeDefined();\r\n        expect(component.onFocusChange).toBeDefined();\r\n\r\n        expect(component.isValid).toBe(true);\r\n        expect(component.isInvalid).toBe(false);\r\n        expect(component.showErrorMessages).toBe(false);\r\n\r\n        expect(component.type).toEqual(DynamicUIBasicFormControlType.Input);\r\n    });\r\n\r\n    it(\"should have an input element\", () => {\r\n\r\n        expect(testElement instanceof DebugElement).toBe(true);\r\n    });\r\n\r\n    it(\"should listen to native focus and blur events\", () => {\r\n\r\n        spyOn(component, \"onFocusChange\");\r\n\r\n        testElement.triggerEventHandler(\"focus\", null);\r\n        testElement.triggerEventHandler(\"blur\", null);\r\n\r\n        expect(component.onFocusChange).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it(\"should listen to native change event\", () => {\r\n\r\n        spyOn(component, \"onValueChange\");\r\n\r\n        testElement.triggerEventHandler(\"change\", null);\r\n\r\n        expect(component.onValueChange).toHaveBeenCalled();\r\n    });\r\n\r\n    it(\"should update model value when control value changes\", () => {\r\n\r\n        spyOn(component, \"onControlValueChanges\");\r\n\r\n        component.control.setValue(\"test\");\r\n\r\n        // expect(component.onControlValueChanges).toHaveBeenCalled();\r\n    });\r\n\r\n    it(\"should update control value when model value changes\", () => {\r\n\r\n        spyOn(component, \"onModelValueUpdates\");\r\n\r\n        // testModel.valueUpdates.next(\"test\");\r\n\r\n        // expect(component.onModelValueUpdates).toHaveBeenCalled();\r\n    });\r\n\r\n    it(\"should update control activation when model disabled property changes\", () => {\r\n\r\n        spyOn(component, \"onModelDisabledUpdates\");\r\n\r\n        testModel.disabledUpdates.next(true);\r\n\r\n        expect(component.onModelDisabledUpdates).toHaveBeenCalled();\r\n    });\r\n});\r\n"]}