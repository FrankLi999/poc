{"version":3,"sources":["base/src/utils/autofill.utils.spec.ts"],"names":[],"mappings":"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","file":"autofill.utils.spec.js","sourcesContent":["import { AutoFillUtils } from \"./autofill.utils\";\r\n\r\ndescribe(\"DynamicFormAutoFillService test suite\", () => {\r\n\r\n    it(\"should validate autofill expressions correctly\", () => {\r\n\r\n        let value1 = \"section-test shipping mobile tel\",\r\n            value2 = \"billing section-test mobile tel\",\r\n            value3 = \"section-test shipping tel\",\r\n            value4 = \"section-test work given-name\",\r\n            value5 = \"billing cc-name\",\r\n            value6 = \"home email\",\r\n            value7 = \"section-test shipping work\",\r\n            value8 = \"section-test work shipping tel\",\r\n            value9 = \"billing country\",\r\n            value10 = \"billing country name\",\r\n            value11 = \"billing shipping name\",\r\n            value12 = \"section-test1 section-test2 shipping name\",\r\n            value13 = \"section-test1 blabla name\",\r\n            value14 = \"section-test1 blabla mobile tel\";\r\n\r\n        expect(AutoFillUtils.validate(value1)).toBe(true);\r\n        expect(AutoFillUtils.validate(value2)).toBe(false);\r\n        expect(AutoFillUtils.validate(value3)).toBe(false);\r\n        expect(AutoFillUtils.validate(value4)).toBe(false);\r\n        expect(AutoFillUtils.validate(value5)).toBe(true);\r\n        expect(AutoFillUtils.validate(value6)).toBe(true);\r\n        expect(AutoFillUtils.validate(value7)).toBe(false);\r\n        expect(AutoFillUtils.validate(value8)).toBe(false);\r\n        expect(AutoFillUtils.validate(value9)).toBe(true);\r\n        expect(AutoFillUtils.validate(value10)).toBe(false);\r\n        expect(AutoFillUtils.validate(value11)).toBe(false);\r\n        expect(AutoFillUtils.validate(value12)).toBe(false);\r\n        expect(AutoFillUtils.validate(value13)).toBe(false);\r\n        expect(AutoFillUtils.validate(value14)).toBe(false);\r\n    });\r\n\r\n    it(\"should validate address tokens correctly\", () => {\r\n\r\n        expect(AutoFillUtils.isAddressToken(\"shipping\")).toBe(true);\r\n        expect(AutoFillUtils.isAddressToken(\"billing\")).toBe(true);\r\n        expect(AutoFillUtils.isAddressToken(\"home\")).toBe(false);\r\n    });\r\n\r\n    it(\"should validate contact tokens correctly\", () => {\r\n\r\n        expect(AutoFillUtils.isContactToken(\"home\")).toBe(true);\r\n        expect(AutoFillUtils.isContactToken(\"work\")).toBe(true);\r\n        expect(AutoFillUtils.isContactToken(\"mobile\")).toBe(true);\r\n        expect(AutoFillUtils.isContactToken(\"fax\")).toBe(true);\r\n        expect(AutoFillUtils.isContactToken(\"pager\")).toBe(true);\r\n        expect(AutoFillUtils.isContactToken(\"billing\")).toBe(false);\r\n    });\r\n\r\n    it(\"should validate section tokens correctly\", () => {\r\n\r\n        expect(AutoFillUtils.isSectionToken(\"section-test\")).toBe(true);\r\n        expect(AutoFillUtils.isSectionToken(\"section\")).toBe(false);\r\n    });\r\n\r\n    it(\"should validate contact fields correctly\", () => {\r\n\r\n        expect(AutoFillUtils.isContactField(\"tel\")).toBe(true);\r\n        expect(AutoFillUtils.isContactField(\"email\")).toBe(true);\r\n        expect(AutoFillUtils.isContactField(\"impp\")).toBe(true);\r\n        expect(AutoFillUtils.isContactField(\"name\")).toBe(false);\r\n        expect(AutoFillUtils.isContactField(\"country\")).toBe(false);\r\n    });\r\n\r\n    it(\"should validate fields correctly\", () => {\r\n\r\n        expect(AutoFillUtils.isField(\"street-address\")).toBe(true);\r\n        expect(AutoFillUtils.isField(\"nickname\")).toBe(true);\r\n        expect(AutoFillUtils.isField(\"organization\")).toBe(true);\r\n        expect(AutoFillUtils.isField(\"postal-code\")).toBe(true);\r\n        expect(AutoFillUtils.isField(\"country\")).toBe(true);\r\n        expect(AutoFillUtils.isField(\"tel\")).toBe(false);\r\n        expect(AutoFillUtils.isField(\"email\")).toBe(false);\r\n    });\r\n});"]}