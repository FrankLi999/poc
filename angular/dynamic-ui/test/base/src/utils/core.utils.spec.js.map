{"version":3,"sources":["base/src/utils/core.utils.spec.ts"],"names":[],"mappings":"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","file":"core.utils.spec.js","sourcesContent":["import { Utils } from \"./core.utils\";\r\n\r\ndescribe(\"Core Utils test suite\", () => {\r\n\r\n    let configObject: any;\r\n\r\n    beforeEach(() => {\r\n\r\n        configObject = {\r\n            a: 5,\r\n            b: true,\r\n            c: \"test\",\r\n            d: {\r\n                prop1: 2\r\n            },\r\n            e: {\r\n                prop1: 1,\r\n                prop2: {\r\n                    nested1: 42\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n\r\n    it(\"should detect equality correctly\", () => {\r\n\r\n        let testValue1 = \"test\",\r\n            testValue2 = 5,\r\n            comparables1 = [\"test1\", \"test2\", \"test3\"],\r\n            comparables2 = [\"test1\", \"test2\", \"test\"],\r\n            comparables3 = [1, 2, 3, 4],\r\n            comparables4 = [2, 3, 4, 5, 6];\r\n\r\n        expect(Utils.equals<string>(testValue1, ...comparables1)).toBe(false);\r\n        expect(Utils.equals<string>(testValue1, ...comparables2)).toBe(true);\r\n        expect(Utils.equals<number>(testValue2, ...comparables3)).toBe(false);\r\n        expect(Utils.equals<number>(testValue2, ...comparables4)).toBe(true);\r\n    });\r\n\r\n\r\n    it(\"should merge correctly\", () => {\r\n\r\n        let valueA = Utils.merge(configObject.a, 4),\r\n            valueB = Utils.merge(configObject.b, false),\r\n            valueC = Utils.merge(configObject.c, null),\r\n            valueD1 = Utils.merge(configObject.d, {prop1: 1}),\r\n            valueD2 = Utils.merge(configObject.d, {prop2: 3}),\r\n            valueE = Utils.merge(configObject.e, null);\r\n\r\n        let valueY = Utils.merge(configObject.y, false),\r\n            valueZ = Utils.merge(configObject.z, null);\r\n\r\n        expect(valueA).toBe(5);\r\n        expect(valueB).toBe(true);\r\n        expect(valueC).toEqual(\"test\");\r\n\r\n        expect(valueD1.prop1).toBe(2);\r\n        expect(valueD2.prop1).toBe(2);\r\n        expect(valueD2.prop2).toBe(3);\r\n        expect(valueE.prop1).toBe(1);\r\n\r\n        expect(valueY).toBe(false);\r\n        expect(valueZ).toBeNull();\r\n    });\r\n\r\n\r\n    it(\"should merge recursively correctly\", () => {\r\n\r\n        let valueE = Utils.merge(configObject.e, {\r\n            prop1: 10,\r\n            prop2: {\r\n                nested1: 21,\r\n                nested2: 84\r\n            },\r\n            prop3: 100\r\n        });\r\n\r\n        expect(valueE.prop1).toBe(1);\r\n\r\n        expect(valueE.prop2).toBeDefined();\r\n        expect(valueE.prop2.nested1).toBe(42);\r\n\r\n        expect(valueE.prop2.nested2).toBeDefined();\r\n        expect(valueE.prop2.nested2).toBe(84);\r\n\r\n        expect(valueE.prop3).toBeDefined();\r\n        expect(valueE.prop3).toBe(100);\r\n    });\r\n\r\n\r\n    it(\"should detect empty strings correctly\", () => {\r\n\r\n        let testString0 = undefined,\r\n            testString1 = \"\",\r\n            testString2 = \"test string\";\r\n\r\n        expect(Utils.isEmptyString(testString0)).toBe(true);\r\n        expect(Utils.isEmptyString(testString1)).toBe(true);\r\n        expect(Utils.isEmptyString(testString2)).toBe(false);\r\n    });\r\n\r\n\r\n    it(\"should detect a number correctly\", () => {\r\n\r\n        let testNumber0 = undefined,\r\n            testNumber1 = 0,\r\n            testNumber2 = 42;\r\n\r\n        expect(Utils.isNumber(testNumber0)).toBe(false);\r\n        expect(Utils.isNumber(testNumber1)).toBe(true);\r\n        expect(Utils.isNumber(testNumber2)).toBe(true);\r\n    });\r\n\r\n\r\n    it(\"should detect a true, non-null object correctly\", () => {\r\n\r\n        let testObject1 = {},\r\n            testObject2 = null;\r\n\r\n        expect(Utils.isTrueObject(testObject1)).toBe(true);\r\n        expect(Utils.isTrueObject(testObject2)).toBe(false);\r\n    });\r\n\r\n\r\n    it(\"should detect a non-empty object correctly\", () => {\r\n\r\n        let testObject1 = {},\r\n            testObject2 = null,\r\n            testObject3 = {\"test\": 42};\r\n\r\n        expect(Utils.isNonEmptyObject(testObject1)).toBe(false);\r\n        expect(Utils.isNonEmptyObject(testObject2)).toBe(false);\r\n        expect(Utils.isNonEmptyObject(testObject3)).toBe(true);\r\n    });\r\n\r\n\r\n    it(\"should convert a text mask to string correctly\", () => {\r\n\r\n        let testValue1 = \"test\",\r\n            testValue2 = /[1-9]/,\r\n            testValue3 = [testValue1, testValue2],\r\n            testResult3 = Utils.maskToString(testValue3) as string[];\r\n\r\n        expect(Utils.maskToString(testValue1)).toEqual(testValue1);\r\n        expect(Utils.maskToString(testValue2)).toEqual(testValue2.toString());\r\n\r\n        expect(testResult3[0]).toEqual(testValue1);\r\n        expect(testResult3[1]).toEqual(testValue2.toString());\r\n    });\r\n\r\n\r\n    it(\"should recreate a text mask from string correctly\", () => {\r\n\r\n        let testValue1 = \"test\",\r\n            testValue2 = \"/[1-9]/\",\r\n            testValue3 = [testValue1, testValue2],\r\n            testResult3 = Utils.maskFromString(testValue3) as (string | RegExp)[];\r\n\r\n        expect(Utils.maskFromString(testValue1)).toEqual(testValue1);\r\n        expect(Utils.maskFromString(testValue2)).toEqual(new RegExp(\"[1-9]\"));\r\n\r\n        expect(testResult3[0]).toEqual(testValue1);\r\n        expect(testResult3[1]).toEqual(new RegExp(\"[1-9]\"));\r\n    });\r\n});"]}