{"version":3,"sources":["base/src/service/dynamic-ui-form-service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAC3C,wCAOwB;AAKxB,uDAqCkC;AAClC,2FAE8C;AAG9C,IAAa,oBAAoB;IAC7B,8BACY,iBAAiD,EACjD,WAAwB;QADxB,sBAAiB,GAAjB,iBAAiB,CAAgC;QACjD,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAExC,0CAAW,GAAX,UAAY,cAA8B;QACtC,MAAM,CAAC;YACF,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC;YACvE,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,cAAc,CAAC,aAAa,CAAC;SAC1F,CAAC;IACN,CAAC;IAED,8CAAe,GAAf,UAAgB,aAA6B;QACzC,IAAM,UAAU,GAA0B,aAAa,CAAC,UAAU,CAAC;QACnE,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7C,IAAI,SAAS,GAAuC,EAAE,CAAC;YACvD,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;gBACrD,IAAI,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,EACnC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;gBAC9C,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;YACnE,CAAC;YACD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CACzB,SAAS,CACZ,CAAC;IACN,CAAC;IAED,0CAAW,GAAX,UAAY,UAAiC;QACzC,IAAI,SAAS,GAAuC,EAAE,CAAC;QACvD,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;YACrD,IAAI,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,EACnC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;YAC9C,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC;IACD,yCAAU,GAAV,UAAW,SAAoB,EACvB,KAA2C;QADnD,iBAOC;QANO,sBAAA,EAAA,YAA2C;QAC/C,IAAI,SAAS,GAAuC,EAAE,CAAC;QACvD,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,cAAc;YACvC,KAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAED,8CAAe,GAAf,UAAgB,eAAsC,EAClD,KAA2C;QAD/C,iBAOC;QANG,sBAAA,EAAA,YAA2C;QAC3C,IAAI,SAAS,GAAuC,EAAE,CAAC;QACvD,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;YAClC,IAAI,OAAO,GAAG,KAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAED,qDAAsB,GAAtB,UAAuB,SAA6C,EAC5D,cAA8B,EAC9B,KAA2C;QAFnD,iBAiCC;QA/BO,sBAAA,EAAA,YAA2C;QAC/C,IAAI,OAAO,GAAoB,IAAI,CAAC;QACpC,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;YACvB,IAAI,gBAAgB,GAAG,cAAgC,CAAC;YACxD,OAAO,GAAG,IAAI,mBAAW,CACrB;gBACI,KAAK,EAAE,gBAAgB,CAAC,YAAY,GAAE,gBAAgB,CAAC,YAAY,GAAG,EAAE;gBACxE,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;aACtC,EACD,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAC/D,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAC5E,CAAC;YACF,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;QAE5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,KAAK,+CAAkC,CAAC,CAAC,CAAC;YACpE,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAC/C,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,KAAK,4CAA+B,CAAC,CAAC,CAAC;YACjE,IAAI,cAAc,GAAG,cAAc,CAAC,UAAU,EAC1C,OAAK,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YAC7C,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,OAAK,CAAC,CAAC;YACtD,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;QAC5C,CAAC;QAAE,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;YACpC,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,KAAK;gBACnC,KAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;YAChC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK;gBAChC,KAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IACL,2BAAC;AAAD,CA1FA,AA0FC,IAAA;AA1FY,oBAAoB;IADhC,iBAAU,EAAE;qCAGsB,mEAA8B;QACpC,mBAAW;GAH3B,oBAAoB,CA0FhC;AA1FY,oDAAoB","file":"dynamic-ui-form-service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { \r\n  FormBuilder,\r\n  AbstractControl,\r\n  FormGroup,\r\n  FormArray,\r\n  FormControl,\r\n  Validators\r\n} from \"@angular/forms\";\r\n\r\nimport {\r\n    ComponentModel, \r\n} from \"../model/form/component.model\";\r\nimport { \r\n    FormModel,\r\n    \r\n    DYNAMIC_UI_COMPONENT_TYPE_DATAGRID,\r\n    DYNAMIC_UI_COMPONENT_TYPE_GROUP,\r\n    DYNAMIC_UI_COMPONENT_TYPE_CONTENT,\r\n    DYNAMIC_UI_COMPONENT_TYPE_HTMLELEMENT,\r\n    DYNAMIC_UI_COMPONENT_TYPE_BUTTON,\r\n    DYNAMIC_UI_COMPONENT_TYPE_RESOURCE,\r\n    \r\n    DYNAMIC_UI_COMPONENT_TYPE_FORM,\r\n    DYNAMIC_UI_COMPONENT_TYPE_COLUMNS,\r\n    DYNAMIC_UI_COMPONENT_TYPE_TABLE,\r\n\r\n    DYNAMIC_UI_COMPONENT_TYPE_CONTAINER,\r\n    DYNAMIC_UI_COMPONENT_TYPE_WELL,\r\n    DYNAMIC_UI_COMPONENT_TYPE_PANEL,\r\n    DYNAMIC_UI_COMPONENT_TYPE_FIELDSET,   \r\n\r\n    DYNAMIC_UI_COMPONENT_TYPE_SELECTBOXES,\r\n    DYNAMIC_UI_COMPONENT_TYPE_ADDRESS,\r\n    \r\n    DYNAMIC_UI_COMPONENT_TYPE_TEXTFIELD,\r\n    DYNAMIC_UI_COMPONENT_TYPE_NUMBER,\r\n    DYNAMIC_UI_COMPONENT_TYPE_CHECKBOX,\r\n    DYNAMIC_UI_COMPONENT_TYPE_EMAIL,\r\n    DYNAMIC_UI_COMPONENT_TYPE_PHONENUMBER,\r\n    DYNAMIC_UI_COMPONENT_TYPE_SUERVEY,\r\n    DYNAMIC_UI_COMPONENT_TYPE_SIGNATURE,\r\n    DYNAMIC_UI_COMPONENT_TYPE_PASSWORD,\r\n    DYNAMIC_UI_COMPONENT_TYPE_DAY,\r\n    DYNAMIC_UI_COMPONENT_TYPE_TEXTAREA,\r\n    DYNAMIC_UI_COMPONENT_TYPE_RADIO,\r\n    DYNAMIC_UI_COMPONENT_TYPE_CURRENCY,\r\n    DYNAMIC_UI_COMPONENT_TYPE_SELECT,\r\n    DYNAMIC_UI_COMPONENT_TYPE_DATETIME,\r\n    DYNAMIC_UI_COMPONENT_TYPE_HIDDEN\r\n} from \"../model/form/form.model\";\r\nimport {\r\n  DynamicUIFormValidationService\r\n} from './dynamic-ui-form-validation.service';\r\n\r\n@Injectable()\r\nexport class DynamicUIFormService {\r\n    constructor(\r\n        private validationService: DynamicUIFormValidationService,\r\n        private formBuilder: FormBuilder) {}\r\n\r\n    createExtra(componentModel: ComponentModel): { [key: string]: any } {\r\n        return {\r\n             validator: this.validationService.getValidator(componentModel.validate),\r\n             asyncValidator: this.validationService.getAsyncValidator(componentModel.asyncValidate)\r\n        };\r\n    }\r\n\r\n    createFormArray(datagridModel: ComponentModel): FormArray {\r\n        const components: Array<ComponentModel> = datagridModel.components;\r\n        let formArray = [];\r\n        for (let i = 0; i < datagridModel.numRows; i++) {\r\n            let formGroup: { [id: string]: AbstractControl; } = {};  \r\n            for (let index = 0; index < components.length; index++) {\r\n                let componnentModel = components[index],\r\n                    extra = this.createExtra(componnentModel);\r\n                this.createFormGroupControl(formGroup, componnentModel, extra);\r\n            }\r\n            formArray.push(this.formBuilder.group(formGroup));\r\n        }\r\n        return this.formBuilder.array(\r\n            formArray\r\n        );\r\n    }\r\n\r\n    createGroup(components: Array<ComponentModel>): FormGroup {\r\n        let formGroup: { [id: string]: AbstractControl; } = {};  \r\n        for (let index = 0; index < components.length; index++) {\r\n            let componnentModel = components[index],\r\n                extra = this.createExtra(componnentModel);\r\n            this.createFormGroupControl(formGroup, componnentModel, extra);\r\n        }\r\n        return this.formBuilder.group(formGroup);\r\n    }\r\n    createForm(formModel: FormModel,\r\n            extra: { [key: string]: any } | null = null): FormGroup {\r\n        let formGroup: { [id: string]: AbstractControl; } = {};        \r\n        formModel.components.forEach(componentModel => {\r\n            this.createFormGroupControl(formGroup, componentModel);\r\n        });\r\n        return this.formBuilder.group(formGroup, extra);\r\n    }\r\n\r\n    createFormGroup(componentModels: Array<ComponentModel>,\r\n        extra: { [key: string]: any } | null = null): FormGroup {\r\n        let formGroup: { [id: string]: AbstractControl; } = {};        \r\n        componentModels.forEach(componentModel => {\r\n            let control = this.createFormGroupControl(formGroup, componentModel);\r\n        });\r\n        return this.formBuilder.group(formGroup, extra);\r\n    }\r\n\r\n    createFormGroupControl(formGroup: { [id: string]: AbstractControl; }, \r\n            componentModel: ComponentModel,\r\n            extra: { [key: string]: any } | null = null): void {\r\n        let control: AbstractControl = null;\r\n        if (componentModel.input) {\r\n            let formControlModel = componentModel as ComponentModel;\r\n            control = new FormControl(\r\n                {\r\n                    value: formControlModel.defaultValue? formControlModel.defaultValue : '',\r\n                    disabled: formControlModel.disabled\r\n                },\r\n                this.validationService.getValidators(formControlModel.validate),\r\n                this.validationService.getAsyncValidators(formControlModel.asyncValidate)\r\n            );\r\n            formGroup[componentModel.key] = control;\r\n            \r\n        } else if (componentModel.type === DYNAMIC_UI_COMPONENT_TYPE_DATAGRID) {\r\n            control = this.createFormArray(componentModel);\r\n            formGroup[componentModel.key] = control;\r\n        } else if (componentModel.type === DYNAMIC_UI_COMPONENT_TYPE_GROUP) {\r\n            let formGroupModel = componentModel.components ,\r\n                extra = this.createExtra(componentModel);\r\n            control = this.createFormGroup(formGroupModel, extra);\r\n            formGroup[componentModel.key] = control;\r\n        }  else if (componentModel.components) {\r\n            componentModel.components.forEach(model => {\r\n                this.createFormGroupControl(formGroup, model);\r\n            });\r\n        } else if (componentModel.columns) {\r\n            componentModel.columns.forEach(model => {\r\n                this.createFormGroupControl(formGroup, model);\r\n            });\r\n        }\r\n    }\r\n}"]}