{"version":3,"sources":["base/src/service/dynamic-ui-form-validation.service.ts"],"names":[],"mappings":"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","file":"dynamic-ui-form-validation.service.js","sourcesContent":["import { Injectable, Inject, Optional } from \"@angular/core\";\r\nimport {\r\n    AbstractControl,\r\n    ValidatorFn,\r\n    AsyncValidatorFn,\r\n    Validators,\r\n    NG_VALIDATORS,\r\n    NG_ASYNC_VALIDATORS\r\n} from \"@angular/forms\";\r\nimport { ComponentModel } from \"../model/form/component.model\";\r\nimport {  ValidationModel, Validation } from \"../model/form/validation.model\";\r\nimport { Utils } from \"../utils/core.utils\";\r\nimport { ValidationUtils } from \"../utils/validation.utils\";\r\n\r\nexport type DynamicUIValidatorFactory = (args: any) => ValidatorFn | AsyncValidatorFn;\r\n\r\nexport type DynamicUIValidatorsToken = (ValidatorFn | AsyncValidatorFn)[];\r\n\r\n@Injectable()\r\nexport class DynamicUIFormValidationService {\r\n\r\n    constructor(@Optional() @Inject(NG_VALIDATORS) private ngValidators: ValidatorFn[],\r\n                @Optional() @Inject(NG_ASYNC_VALIDATORS) private ngAsyncValidators: AsyncValidatorFn[]) {}\r\n\r\n\r\n    private getValidatorFn(validatorName: string, validatorArgs: any = null,\r\n                           validatorsToken: DynamicUIValidatorsToken = this.ngValidators): ValidatorFn | AsyncValidatorFn | never {\r\n        let validatorFn: DynamicUIValidatorFactory | ValidatorFn | AsyncValidatorFn | null = null;\r\n        if (Validators.hasOwnProperty(validatorName)) { // Angular Standard Validators\r\n            validatorFn = (Validators as any)[validatorName];\r\n        } else if (validatorsToken) { // Custom Validators\r\n            validatorFn = validatorsToken.find(validatorFn => validatorFn.name === validatorName);\r\n        }\r\n        if (!Utils.isFunction(validatorFn)) {\r\n            throw new Error(`validator \"${validatorName}\" is not provided via NG_VALIDATORS or NG_ASYNC_VALIDATORS`);\r\n        }\r\n        if (Utils.isDefined(validatorArgs)) {\r\n            return (validatorFn as Function)(validatorArgs);\r\n        }\r\n        return validatorFn;\r\n    }\r\n\r\n    private getValidatorFns(validatorsModel:  ValidationModel,\r\n                            validatorsToken: DynamicUIValidatorsToken = this.ngValidators): ValidatorFn[] | AsyncValidatorFn[] {\r\n\r\n        let validatorsConfig:  {[validatorKey: string]: Validation};\r\n        let validatorFns: ValidatorFn[] | AsyncValidatorFn[] = [];\r\n\r\n        if (Utils.isTrueObject(validatorsModel)) {\r\n            validatorFns = Object.keys(validatorsModel).filter(validatorFnKey => {\r\n                    if (validatorFnKey === 'customPrivate') {\r\n                        return false;    \r\n                    } else if (validatorFnKey === 'custom') {\r\n                        let str = validatorsModel[validatorFnKey] as string;\r\n                        return Utils.isString(str) && (!Utils.isEmptyString(str));\r\n                    }\r\n                    return true;\r\n                }).map(validatorFnKey => {\r\n                    let validatorName: string,\r\n                        validatorArgs;\r\n                    if (validatorFnKey === 'custom') {\r\n                        validatorName = validatorFnKey; //validatorsModel[validatorFnKey];\r\n                        validatorArgs = null;\r\n                    } else {\r\n                        validatorName = validatorFnKey;\r\n                        //validatorArgs = validatorsModel[validatorFnKey];\r\n                        validatorArgs = null;\r\n                    }\r\n                    return this.getValidatorFn(validatorName, validatorArgs, validatorsToken);\r\n                });\r\n            if (validatorsModel.custom && (!Utils.isString(validatorsModel.custom))) {\r\n                let nameArgs = validatorsModel.custom as Array<Validation>;\r\n                for (let i = 0; i < nameArgs.length; i++) {\r\n                    validatorFns.push(this.getValidatorFn(nameArgs[i].name, nameArgs[i].args, validatorsToken));\r\n                }\r\n            }\r\n        }\r\n        return validatorFns;\r\n    }\r\n\r\n    getValidatorByName(validatorName: string, validatorArgs: any = null): ValidatorFn {\r\n        return this.getValidatorFn(validatorName, validatorArgs) as ValidatorFn;\r\n    }\r\n\r\n    getAsyncValidatorByName(validatorName: string, validatorArgs: any = null): AsyncValidatorFn {\r\n        return this.getValidatorFn(validatorName, validatorArgs, this.ngAsyncValidators) as AsyncValidatorFn;\r\n    }\r\n\r\n    getValidator(validatorConfig: ValidationModel): ValidatorFn | null {\r\n        let validator: ValidatorFn = Validators.nullValidator;\r\n        if (validatorConfig && Utils.isString(validatorConfig.custom)) {\r\n            let validatorName = validatorConfig.custom as string;\r\n            //validator = this.getValidatorFn(validatorName, validatorConfig[validatorName]) as ValidatorFn;\r\n            validator = this.getValidatorFn(validatorName, null) as ValidatorFn;\r\n        }\r\n        return validator;\r\n    }\r\n\r\n    getAsyncValidator(validatorConfig: ValidationModel): AsyncValidatorFn | null {\r\n        let validator: AsyncValidatorFn = null;\r\n        if (validatorConfig && Utils.isString(validatorConfig.custom)) {\r\n            let validatorName = validatorConfig.custom as string;\r\n            //return this.getValidatorFn(validatorName, validatorConfig[validatorName], this.ngAsyncValidators) as AsyncValidatorFn;\r\n            return this.getValidatorFn(validatorName, null, this.ngAsyncValidators) as AsyncValidatorFn;\r\n        }\r\n        return validator;\r\n    }\r\n\r\n    getValidators(validatorsConfig:  ValidationModel): ValidatorFn {\r\n        let validatorFn: ValidatorFn = Validators.nullValidator;\r\n        if (validatorsConfig) {\r\n            let vfns = this.getValidatorFns(validatorsConfig) as ValidatorFn[];\r\n            if (vfns.length == 1) {\r\n                validatorFn = vfns[0];\r\n            } else if (vfns.length > 1) {\r\n                validatorFn = Validators.compose(vfns);\r\n            }\r\n        }\r\n        return validatorFn;\r\n    }\r\n\r\n    //TODO\r\n    getAsyncValidators(validatorsConfig:  ValidationModel): AsyncValidatorFn {\r\n        let asyncValidatorFn: AsyncValidatorFn = Validators.composeAsync([]);\r\n        if (validatorsConfig) {\r\n            let vfns = this.getValidatorFns(validatorsConfig, this.ngAsyncValidators) as AsyncValidatorFn[];\r\n            if (vfns.length == 1) {\r\n                asyncValidatorFn = vfns[0];\r\n            } else if (vfns.length > 1) {\r\n                asyncValidatorFn = Validators.composeAsync(vfns);\r\n            }\r\n        }\r\n        return asyncValidatorFn;\r\n    }\r\n\r\n    createErrorMessages(control: AbstractControl, model: ComponentModel): string[] {\r\n        return Object.keys(control.errors || {}).map(errorCode => {\r\n            let error = control.getError(errorCode),\r\n                message = `Validation error: ${errorCode}`,\r\n                messageKey = Utils.equals(errorCode, \"minlength\", \"maxlength\") ? errorCode.replace(\"length\", \"Length\") : errorCode;\r\n            if (model.errorMessages.hasOwnProperty(messageKey)) {\r\n                message = (model.errorMessages[messageKey] as string).replace(/{{\\s*(.+?)\\s*}}/mg,\r\n                    (match: string, expression: string) => {\r\n                        let propertySource: any = model,\r\n                            propertyName: string = expression;\r\n                        if (expression.indexOf(\"validator.\") >= 0) {\r\n                            propertySource = error;\r\n                            propertyName = expression.replace(\"validator.\", \"\");\r\n                        }\r\n                        return propertySource[propertyName] ? propertySource[propertyName] : null;\r\n                    });\r\n            }\r\n            return message;\r\n        });\r\n    }\r\n}\r\n"]}